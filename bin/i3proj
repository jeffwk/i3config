#!/usr/bin/python3

import sys, time, os
import subprocess
from subprocess import Popen, PIPE, run
from threading import Thread
import json
import argparse

parser = argparse.ArgumentParser(description='Workspace group manager for i3wm')
parser.add_argument('action', nargs=1, choices=[
    'run',
    'active-project',
    'create-project','delete-project',
    'switch-project','next-project','prev-project',
    'transfer-project'])

colors = {
    'fg': '#c8c8c8',
    'bg': '#282828',
    'fg-dim': '#777777',
    'bg-light': '#888888',
    'fg-dark': '#000000',
    'green': '#b5bd68',
    'purple': '#b294bb',
    'blue': '#81a2be',
    'cyan': '#8abeb7',
    'orange': '#de935f',
    'yellow': '#f0c674'
}
bmargin = 6
bpadding = 5

ws_aliases = {
    'home': {
        '1': 'shell',
        '2': 'media',
        '3': 'web',
        '4': 'work'
    },
    'sysrev': {
        '1': 'web',
        '2': 'server',
        '3': 'client',
        '4': 'shell',
        '5': 'shell'
    },
    'i3': {
        '1': 'shell',
        '2': 'emacs'
    }
}

def get_ws_alias(wname):
    pname = cache['active_project']
    if pname in ws_aliases.keys():
        if wname in ws_aliases[pname].keys():
            return ws_aliases[pname][wname]
    return None

def write_icon(s):
    return ('%{T2}' + s + '%{T-}')

def write_offset(offset):
    return ('%{O' + str(offset) + '}')

def write_spaces(nspaces):
    if nspaces > 0:
        return ('%{T1}' + (' '*nspaces) + '%{T-}')
    else:
        return ''

def write_simple_block(label, color, val_color, width, val):
    nspaces = width - len(val)
    return ('%{U' + colors[color] + '}' +
            '%{F' + colors[color] + '}' +
            '%{+u}' +
            write_offset(bpadding) +
            '' + label + ' ' + write_spaces(nspaces) +
            '%{F' + colors[val_color] + '}' + val +
            write_offset(bpadding) +
            '%{-u}' +
            write_offset(bmargin))

def write_multi_block(color, sections):
    s = ''
    s += '%{U' + colors[color] + '}' + '%{+u}'
    s += write_offset(bpadding)
    for section in sections:
        [scolor, sval, swidth] = section
        s += '%{F' + colors[scolor] + '}'
        nspaces = swidth - len(sval)
        s += write_spaces(nspaces)
        s += sval
    s += write_offset(bpadding)
    s += '%{-u}'
    s += write_offset(bmargin)
    return s

cache = {
    'active_project': '',
    'i3_ws': {
        'result': '',
        'lemonbar': ''},
    'values': {
        'qemu': '',
        'synergy': '',
        'cpu': '',
        'mem': '',
        'diskio': '',
        'netspeed': '',
        'fsusage': '',
        'btcprice': '',
        'volume': '',
        'packages': '',
        'date': '',
        'time': '',
        'battery': '',
        'cputemp': ''
    },
    'blocks': {
        'qemu': '',
        'synergy': '',
        'cpu': '',
        'mem': '',
        'diskio': '',
        'netspeed': '',
        'fsusage': '',
        'btcprice': '',
        'volume': '',
        'packages': '',
        'date': '',
        'time': '',
        'battery': '',
        'cputemp': ''
    },
    'main': '',
    'output': '',
    'current': ''
}

def rofi_select(options, message):
    p = Popen(['rofi', '-dmenu', '-mesg', message],
              encoding='utf8', stdin=PIPE, stdout=PIPE)
    print('\n'.join(options), end='\n', file=p.stdin)
    p.stdin.flush()
    result = p.communicate()[0].strip()
    p.stdin.close()
    return result

def get_screen_width():
    p = Popen(["xwininfo -root | egrep 'Width:'"],
              shell=True, encoding='utf8', stdout=PIPE)
    result = p.communicate()[0].strip()
    return int(result.split(' ')[-1])

def get_packages_status():
    p = Popen(["check-packages.sh"], shell=True, encoding='utf8', stdout=PIPE)
    result = p.communicate()[0].strip()
    return result

def get_volume():
    p = Popen(["pamixer", "--get-volume"], encoding='utf8', stdout=PIPE)
    result = p.communicate()[0].strip()
    return result

def get_cputemp():
    p = Popen(['cputemp.sh'], shell=True, encoding='utf8', stdout=PIPE)
    result = p.communicate()[0].strip()
    return result

def qemu_status():
    p = Popen(['qemu-status win10'], shell=True, encoding='utf8', stdout=PIPE)
    result = p.communicate()[0].strip()
    if result == 'on':
        return True
    else:
        return False

def synergy_status():
    p = Popen(['user-service-status synergys'], shell=True, encoding='utf8', stdout=PIPE)
    result = p.communicate()[0].strip()
    if result == 'on':
        return True
    else:
        return False

def i3_msg(mtype, marg):
    p = Popen(['i3-msg -t %s %s' % (mtype, marg)],
              shell=True, encoding='utf8', stdout=PIPE)
    result = p.communicate()[0].strip()
    return result
    
def i3_get_workspaces():
    return i3_msg('get_workspaces', '')

def i3_goto_workspace(pname, wname):
    return i3_msg('command', 'workspace %s_%s' % (pname,str(wname)))

def write_main_output():
    s = ''
    blocks = ['qemu',
              'synergy',
              'cpu',
              'cputemp',
              'mem',
              'diskio',
              'netspeed',
              'fsusage',
              'btcprice',
              'volume',
              'battery',
              'packages',
              'date',
              'time']
    for name in blocks:
        s += cache['blocks'][name]
    return s

def write_full_output():
    return ''.join(
        ['%{l}',
         cache['i3_ws']['lemonbar'],
         '%{r}',
         cache['main']]
    )

def update_main_output():
    cache['main'] = write_main_output()
    
def update_output():
    cache['output'] = write_full_output()

def update_output_all():
    update_main_output()
    update_output()

def render_block(name, vals):
    if name == 'qemu':
        status = vals
        if status == True:
            icon = ''
            color = 'green'
        else:
            icon = ''
            color = 'fg-dim'
        return write_multi_block(
            color,
            [[color, write_icon(icon), 0],
             ['fg', ' qemu', 0]]
        )
    elif name == 'synergy':
        status = vals
        if status == True:
            icon = ''
            color = 'green'
        else:
            icon = ''
            color = 'fg-dim'
        return write_multi_block(
            color,
            [[color, write_icon(icon), 0],
             ['fg', ' synergy', 0]]
        )
    elif name == 'cpu':
        cpu = vals
        return write_simple_block(
            write_icon(''),
            'green', 'fg', 4, '%s%%' % cpu)
    elif name == 'mem':
        [memused, memmax] = vals
        return write_multi_block(
            'yellow',
            [['yellow', write_icon(''), 0],
             ['fg', memused, 6],
             ['yellow', ' /', 0],
             ['fg', memmax, 6]]
        )
    elif name == 'diskio':
        [diskread, diskwrite] = vals
        return write_multi_block(
            'cyan',
            [['cyan', write_icon(''), 0],
             ['fg', diskread, 7],
             ['cyan', ' ' + write_icon(''), 0],
             ['fg', diskwrite, 7],
             ['cyan', ' ' + write_icon(''), 0]]
        )
    elif name == 'netspeed':
        [netdown, netup] = vals
        return write_multi_block(
            'blue',
            [['blue', write_icon(''), 0],
             ['fg', netdown, 7],
             ['blue', ' ' + write_icon(''), 0],
             ['fg', netup, 7],
             ['blue', ' ' + write_icon(''), 0]]
        )
    elif name == 'fsusage':
        [fsused, fssize] = vals
        return write_multi_block(
            'purple',
            [['purple', write_icon(''), 0],
             ['fg', ' ' + fsused, 0],
             ['purple', ' /', 0],
             ['fg', fssize, 0]]
        )
    elif name == 'btcprice':
        btcprice = vals
        return write_simple_block(
            write_icon(''),
            'green', 'fg', 4, btcprice)
    elif name == 'volume':
        volume = vals
        return write_simple_block(
            write_icon(''),
            'orange', 'fg', 4, volume+'%')
    elif name == 'packages':
        pstatus = vals
        return write_simple_block(
            write_icon(''), 'cyan', 'fg', 2, pstatus)
    elif name == 'date':
        datestr = vals
        return write_simple_block(
            write_icon(''), 'blue', 'fg', 10, datestr)
    elif name == 'time':
        timestr = vals
        return write_simple_block(
            write_icon(''), 'purple', 'fg', 8, timestr)
    elif name == 'battery':
        try:
            percent = int(vals)
            return write_simple_block(
                write_icon(''), 'yellow', 'fg', 4, percent+'%'
            )
        except:
            return ''
    elif name == 'cputemp':
        temp = vals
        return write_simple_block(
            write_icon(''), 'orange', 'fg', 4, temp+'°'
        )
    else:
        return ''

def update_block(name, vals, redraw=False):
    prev = cache['values'][name]
    if prev != vals:
        cache['values'][name] = vals
        cache['blocks'][name] = render_block(name, vals)
        if redraw:
            update_output_all()

def update_from_conky(conkyline):
    j = json.loads(conkyline.strip())
    for k in j.keys():
        update_block(k, j[k])

def i3proj_path(fname):
    return os.path.expanduser('~/.i3/i3proj/%s' % fname)

paths = {'active': i3proj_path('active'),
         'prev': i3proj_path('prev'),
         'projects': i3proj_path('projects')}

def get_active_project():
    return open(paths['active']).readlines()[0].strip()

def write_active_project(pname):
    f = open(paths['active'],'w')
    print(pname, end='\n', file=f)
    f.close()

def get_last_project():
    return open(paths['prev']).readlines()[0].strip()

def write_last_project(pname):
    f = open(paths['prev'],'w')
    print(pname, end='\n', file=f)
    f.close()

def get_project_list():
    return [s.strip() for s in open(paths['projects']).readlines()]

def write_project_list(pnames):
    f = open(paths['projects'],'w')
    print('\n'.join(pnames), end='\n', file=f)
    f.close()

def update_active_project():
    cache['active_project'] = get_active_project()

def ws_order(ws):
    wname = '_'.join(ws['name'].split('_')[1:])
    if len(wname) == 0:
        print('ws_order: empty name, returning -1')
        return -1
    if wname[:2] == '10':
        return 10
    else:
        return int(wname[0])

def write_project_block(name, active, wscount):
    if active:
        fg = colors['fg-dark']
        bg = colors['bg-light']
    else:
        fg = colors['fg-dim']
        bg = colors['bg']
    s = ''
    s += '%{-u}'
    s += '%{F' + fg + '}'
    s += '%{B' + bg + '}'
    s += write_offset(bpadding)
    if active:
        s += name
    else:
        s += name[:1]
    if not active:
        s += '[%d]' % wscount
    s += write_offset(bpadding)
    s += '%{B-}%{F-}'
    s += write_offset(bmargin)
    return s

def parse_ws_name(raw_name):
    pname = raw_name.split('_')[0]
    wname = '_'.join(raw_name.split('_')[1:])
    return [pname, wname]

def update_all_ws():
    cache['i3_ws']['list'] = json.loads(i3_get_workspaces())

def project_active_workspaces(all_ws=None):
    if all_ws == None:
        all_ws = cache['i3_ws']['list']
    result = {}
    for ws in all_ws:
        [pname, wname] = parse_ws_name(ws['name'])
        if pname in result.keys():
            result[pname] += [wname]
        else:
            result[pname] = [wname]
    return result

def write_projects_section(all_ws):
    pactive = cache['active_project']
    proj_aws = project_active_workspaces(all_ws)
    pnames = proj_aws.keys()

    s = ''
    s += '%{-u}'
    for pname in proj_aws.keys():
        if pname != pactive:
            s += write_project_block(pname, False, len(proj_aws[pname]))
    s += write_project_block(pactive, True, None)
    return s

def update_workspaces(all_ws_str):
    update = False

    prev_active = cache['active_project']
    update_active_project()
    if prev_active != cache['active_project']:
        update = True
        
    if cache['i3_ws']['result'] != all_ws_str:
        update = True
        cache['i3_ws']['result'] = all_ws_str

    if update:
        s = ''
        try:
            all_ws = json.loads(all_ws_str)
            cache['i3_ws']['list'] = all_ws
            pactive = cache['active_project']
            s += write_projects_section(all_ws)
            s += write_offset(bmargin)
            all_ws_sorted = sorted(all_ws, key=ws_order)
            for ws in all_ws_sorted:
                [pname,wname] = parse_ws_name(ws['name'])
                walias = get_ws_alias(wname)
                if walias == None:
                    wdisplay = wname
                else:
                    wdisplay = wname + '[' + walias + ']'
                wactive = (pname == pactive)
                if wactive:
                    color = {True: 'fg', False: 'fg-dim'}[ws['visible']]
                    s += write_multi_block(
                        color,
                        [[color, wdisplay, 0]]
                    )
            cache['i3_ws']['lemonbar'] = s
            update_output()
        except e:
            print(e)

class i3ws_Thread(Thread):
    def run(self):
        while True:
            update_workspaces( i3_get_workspaces() )
            time.sleep(0.05)

class conky_Thread(Thread):
    def run(self):
        self.ck = Popen(['conky -c ~/.i3/i3proj/conkyrc'],
                        shell=True, encoding='utf8', stdout=PIPE)
        while True:
            result = str(self.ck.stdout.readline())
            update_from_conky(result)
            update_output_all()

class volume_Thread(Thread):
    def run(self):
        while True:
            update_block('volume', get_volume(), True)
            time.sleep(0.1)

class output_Thread(Thread):
    def run(self):
        width = get_screen_width()
        self.lb = subprocess.Popen(
            ['lemonbar -g %dx46 -o 0 -u 2' % width +
             ' -B' + colors['bg'] +
             ' -f \'sauce code pro medium:size=11\'' +
             ' -f \'fontawesome:size=12\''],
            shell=True, encoding='utf8', stdin=PIPE)
        while True:
            if cache['output'] != cache['current']:
                print(cache['output'], end='\n', file=self.lb.stdin)
                self.lb.stdin.flush()
                cache['current'] = cache['output']
            time.sleep(0.05)

class misc_Thread(Thread):
    def run(self):
        while True:
            update_block('qemu', qemu_status(), True)
            update_block('synergy', synergy_status(), True)
            update_block('cputemp', get_cputemp(), True)
            time.sleep(0.5)

class packages_Thread(Thread):
    def run(self):
        while True:
            update_block('packages', get_packages_status(), True)
            time.sleep(120)

def run(args=None):
    write_active_project('home')
    update_active_project()
    i3_goto_workspace('home',1)

    i3ws = i3ws_Thread()
    i3ws.start()

    conky = conky_Thread()
    conky.start()

    volume = volume_Thread()
    volume.start()

    packages = packages_Thread()
    packages.start()

    misc = misc_Thread()
    misc.start()

    output = output_Thread()
    output.start()

    output.join()

def get_visible_ws():
    return [ws for ws in cache['i3_ws']['list']
            if ws['visible']][0]

def transfer_project(pname=None):
    plist = get_project_list()
    if pname == None:
        pname = rofi_select(plist, 'Transfer window to project:')
    if pname not in plist:
        print('invalid project name: %s' % pname)
    else:
        update_all_ws()
        active_ws = get_visible_ws()
        if pname != None and active_ws != None:
            wname = pname + '_' + str(ws_order(active_ws))
            i3_msg('command',
                   'move container to workspace ' + wname)

def switch_project(pname=None):
    plist = get_project_list()
    active = get_active_project()
    if pname == None:
        pname = rofi_select(plist, 'Switch to project:')
    if pname in plist:
        write_last_project(get_active_project())
        write_active_project(pname)
        i3_goto_workspace(pname, 1)
    else:
        print('invalid project name: %s' % pname)

def create_project(args=None):
    plist = get_project_list()
    pname = rofi_select([], 'Enter name for new project:')
    if pname not in plist:
        plist += [pname]
        write_project_list(plist)
    switch_project(pname)

def delete_project(pdelete=None):
    update_all_ws()
    proj_aws = project_active_workspaces()
    plist = get_project_list()
    plist_empty = [pname for pname in plist if pname not in proj_aws.keys()]
    if pdelete == None:
        pdelete = rofi_select(plist_empty, 'Delete project:')
    if pdelete not in plist_empty:
        print('\'%s\' is not a valid empty project' % pname)
    else:
        new_plist = [pname for pname in plist if pname != pdelete]
        if len(new_plist) == 0:
            print('unable to delete, project list would be empty')
        else:
            write_project_list(new_plist)

if __name__ == '__main__':
    args=parser.parse_args()
    action = args.action[0]
    if action == 'run':
        run(args)
    elif action == 'transfer-project':
        transfer_project()
    elif action == 'switch-project':
        switch_project()
    elif action == 'create-project':
        create_project(args)
    elif action == 'delete-project':
        delete_project()
    elif action == 'active-project':
        print(get_active_project())
    else:
        print('invalid command-line arguments')
